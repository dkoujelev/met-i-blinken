{"version":3,"sources":["components/ResourceCard.tsx","data.tsx","components/Main.tsx","components/Header.tsx","components/Footer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ResourceCard","_ref","title","link","icon","react_default","a","createElement","href","className","resources","index_esm","Main","map","resource","ResourceCard_ResourceCard","Header","Footer","target","rel","App","Header_Header","Main_Main","Footer_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.15f2176a.chunk.js","sourcesContent":["import React from \"react\";\nimport { Resource } from \"../data\";\n\nexport const ResourceCard = ({ title, link, icon }: Resource) => {\n  return (\n    <a href={link} className=\"resource-card\">\n      <div className=\"card-content\">\n        <h1 className=\"card-title\">{title}</h1>\n        <span className=\"card-icon\">{icon}</span>\n      </div>\n    </a>\n  );\n};\n","import {\n  FaRegMap,\n  FaUtensils,\n  FaTableTennis,\n  FaHome,\n  FaGraduationCap,\n  FaRegClock,\n  FaDownload\n} from \"react-icons/fa\";\nimport React from \"react\";\n\nexport type Resource = {\n  title: string;\n  link: string;\n  icon: React.ReactNode;\n};\n\nexport const resources: Resource[] = [\n  {\n    title: \"Fadderuke\",\n    link: \"https://student.oslomet.no/fadderuker-ingenior-teknologi-og-data\",\n    icon: <p>13. Aug</p>\n  },\n  {\n    title: \"Studiestart\",\n    link:\n      \"https://student.oslomet.no/anvendt-data-og-informasjonsteknologi-acit\",\n    icon: <p>19. Aug</p>\n  },\n  {\n    title: \"Studentslippet\",\n    link: \"https://studentslippet.no/\",\n    icon: <p>24. Aug</p>\n  },\n  {\n    title: \"Grupperom\",\n    link: \"https://student.oslomet.no/grupperom\",\n    icon: <FaRegClock />\n  },\n  {\n    title: \"Programvare\",\n    link: \"https://student.oslomet.no/grupperom\",\n    icon: <FaDownload />\n  },\n  {\n    title: \"Studentweb\",\n    link: \"https://fsweb.no/studentweb/login.jsf?inst=FSHIOA\",\n    icon: <FaGraduationCap />\n  },\n  {\n    title: \"MazeMap\",\n    link:\n      \"https://use.mazemap.com/#v=1&zlevel=1&left=10.7153450&right=10.7543490&top=59.9261840&bottom=59.9165320&campusid=53\",\n    icon: <FaRegMap />\n  },\n  {\n    title: \"Middag\",\n    link: \"https://www.sio.no/mat-og-drikke\",\n    icon: <FaUtensils />\n  },\n  {\n    title: \"Book bane\",\n    link: \"https://www.sio.no/trening/haller-og-baner/book-hall-eller-bane#/\",\n    icon: <FaTableTennis />\n  },\n  {\n    title: \"SiO Bolig\",\n    link: \"https://www.sio.no/minside/min-okonomi/boligokonomi\",\n    icon: <FaHome />\n  }\n];\n","import React from \"react\";\nimport { resources } from \"../data\";\nimport { ResourceCard } from \".\";\n\nexport const Main = () => {\n  return (\n    <main className=\"main\">\n      {resources.map(resource => {\n        return <ResourceCard {...resource} />;\n      })}\n    </main>\n  );\n};\n","import React from \"react\";\nimport { FaBullseye } from \"react-icons/fa\";\n\nexport const Header = () => {\n  return (\n    <header className=\"header\">\n      <span className=\"header-icon\">\n        <FaBullseye />\n      </span>\n      <h1 className=\"header-title\">&nbsp;MET I BLINKEN&nbsp;</h1>\n      <span className=\"header-icon\">\n        <FaBullseye />\n      </span>\n    </header>\n  );\n};\n","import React from \"react\";\nimport {\n  FaFacebook,\n  FaTwitterSquare,\n  FaLinkedin,\n  FaInstagram,\n  FaFlickr\n} from \"react-icons/fa\";\n\nexport const Footer = () => {\n  return (\n    <footer className=\"footer\">\n      <a\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        href=\"https://www.facebook.com/oslomet/\"\n        className=\"footer-icon facebook\"\n      >\n        <FaFacebook />\n      </a>\n      <a\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        href=\"https://twitter.com/oslomet\"\n        className=\"footer-icon twitter\"\n      >\n        <FaTwitterSquare />\n      </a>\n      <a\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        href=\"https://no.linkedin.com/school/oslomet/\"\n        className=\"footer-icon linkedin\"\n      >\n        <FaLinkedin />\n      </a>\n      <a\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        href=\"https://www.flickr.com/photos/hioa/\"\n        className=\"footer-icon flickr\"\n      >\n        <FaFlickr />\n      </a>\n      <a\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        href=\"https://www.instagram.com/oslomet/?hl=nb\"\n        className=\"footer-icon instagram\"\n      >\n        <FaInstagram />\n      </a>\n    </footer>\n  );\n};\n","import React from \"react\";\nimport \"./App.scss\";\nimport { Main, Header, Footer } from \"./components\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"page-container\">\n      <Header />\n      <Main />\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}